const glob = require('glob'),
  path = require('path'),
  fs = require('fs/promises')

const defaultOptions = {
  filter: /generated:(.+)/i,
  namespace: 'generator-ns',
  resolveDir: path.join(__dirname, '..', 'src'),
  cacheDir: path.join(__dirname, '..', 'src', '__generated__'),
  cacheExt: 'ts',

  loader: 'ts',

  modules: {},
}

/**
 * For TypeScript + ESLint linting
 * @param {{
 *    cacheDir: string
 *    cacheExt: string
 *    name: string
 *    contents: string
 * }} opts
 * @returns Path to cached file on disk
 */
async function saveToCache({ cacheDir, cacheExt, name, contents }) {
  const cacheFile = path.join(cacheDir, name + '.' + cacheExt)
  await fs.mkdir(path.dirname(cacheFile), { recursive: true })
  await fs.writeFile(cacheFile, contents, 'utf8')
  return cacheFile
}

function verifyModulesObj({ modules, loader }) {
  for (const key in modules) {
    ;(ofn => {
      modules[key] = async (...args) => {
        const oret = await ofn.apply(this, args)
        let result = {
          code: '',
          loader,
        }

        if (typeof oret === 'string') {
          result.code = oret
        } else {
          result = { ...result, ...oret }
        }
        return result
      }
    })(modules[key])
  }
  return modules
}

/**
 * Creates virtual generated modules
 * @param {{
 *    filter: RegExp
 *    namespace: string
 *    resolveDir: string
 *    modules: Record<string, CallableFunction>
 * }} opts
 * @returns {import('esbuild').Plugin}
 */
function esbuildPluginGenerator(opts = defaultOptions) {
  opts = Object.assign({}, defaultOptions, opts)

  const { filter, namespace, resolveDir, cacheDir, cacheExt } = opts
  const modules = verifyModulesObj(opts)

  return {
    name: 'generator',
    setup(build) {
      build.onResolve({ filter }, args => ({
        path: args.path,
        namespace,
      }))
      build.onLoad(
        {
          filter,
          namespace,
        },
        async args => {
          const [_, name] = filter.exec(args.path)
          const func = modules[name]
          if (typeof func !== 'function') throw new TypeError(`generated:${name} has no function associated with it`)

          const result = await func()

          const contents =
            `// This file was auto-generated by scripts/esbuild-plugin-generator.cjs\n// ${new Date().toISOString()}\n` +
            result.code
          await saveToCache({ cacheDir, cacheExt, name, contents })
          return {
            contents,
            resolveDir,
            loader: result.loader,
          }
        }
      )
    },
  }
}

module.exports = esbuildPluginGenerator
